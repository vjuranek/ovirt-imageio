#!/usr/bin/python3
# ovirt-imageio
# Copyright (C) 2018 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

"""
http-client - upload and download images to ovirt-imageio

How to use:

1. Create a ticket json:

    $ cat ticket.json
    {
        "uuid": "test",
        "size": 1073741824,
        "url": "file:///dev/vgname/lvname",
        "timeout": 3000,
        "ops": ["read", "write"]
    }

2. Allow ovirt-imageio-daemon access to the ticket url:

    $ chown vdsm:kvm /dev/vgname/lvname

3. Install the ticket

    $ curl --unix-socket /run/vdsm/ovirt-imageio-daemon.sock \
          -X PUT \
          --upload-file ticket.json \
          http://localhost/tickets/test

4. Upload an image:

    ./http-client upload --insecure /path/to/image https://host:54322/images/test

5. Download an image:

    ./http-client download --insecure https://host:54322/images/test /path/to/image

"""

import argparse
import logging

from ovirt_imageio import client
from ovirt_imageio import ui


def upload(args):
    with ui.ProgressBar() as pb:
        client.upload(
            args.filename,
            args.url,
            args.cafile,
            buffer_size=args.buffer_size,
            secure=args.secure,
            progress=pb)


def download(args):
    with ui.ProgressBar() as pb:
        client.download(
            args.url,
            args.filename,
            args.cafile,
            fmt=args.format,
            buffer_size=args.buffer_size,
            secure=args.secure,
            progress=pb)


parser = argparse.ArgumentParser(description="HTTP client")

parser.add_argument(
    "-c", "--cafile",
    help="path to oVirt engine certificate for verifying server.")

parser.add_argument(
    "--insecure",
    dest="secure",
    action="store_false",
    default=True,
    help=("do not verify server certificates and host name (not "
          "recommened)."))

parser.add_argument(
    "-b", "--buffer-size",
    type=lambda v: int(v) * 1024,
    default=client.BUFFER_SIZE,
    help="buffer size in KiB for performance tuning (default {})"
         .format(client.BUFFER_SIZE // 1024))

parser.add_argument(
    "-v", "--verbose",
    action="store_true",
    help="Be more verbose")

commands = parser.add_subparsers(title="commands")

upload_parser = commands.add_parser(
    "upload",
    help="upload image")
upload_parser.set_defaults(command=upload)
upload_parser.add_argument(
    "filename",
    help="path to image")
upload_parser.add_argument(
    "url",
    help="transfer URL")

download_parser = commands.add_parser(
    "download",
    help="download image")
download_parser.set_defaults(command=download)
download_parser.add_argument(
    "-f", "--format",
    choices=("raw", "qcow2"),
    default="qcow2",
    help=("download image format. The default qcow2 is usually best choice "
          "since it supports incremental backups"))
download_parser.add_argument(
    "--incremental",
    action="store_true",
    help=("download only changed blocks. Can be used only during incremental "
          "backup and requires --format=qcow2"))
download_parser.add_argument(
    "url",
    help="transfer URL")
download_parser.add_argument(
    "filename",
    help="path to image")

args = parser.parse_args()

logging.basicConfig(
    level=logging.DEBUG if args.verbose else logging.WARNING,
    format=("%(asctime)s %(levelname)-7s (%(threadName)s) [%(name)s] "
            "%(message)s"))

args.command(args)
